What happens when you intitialize a repository? Why do you need to do it?
We need to initialize a repository so we can start tracking changes in the files for version control purpose. This way we will be able to track all changes in various files by saving various commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is where files are added before a commit is generated. Staging area in the intermediate stage between working directory and repository. Once all the files that needs to be added to a commit has been added to the staging area, then we can generate a commit to the repository.

How can you use the staging area to make sure you have one commit per logical change?
Since the staging area is the intermediate stage between working directory and repository, therefore we can check all the changes that we have made in any file in the working direcotry against the staging area (which contains the file in the same state as the corresponding file in repository that was last committed). Once all the desired modifications required for a logical change has been made, then we we can add commit to the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are very helpful in trying out different experimental versions as the master version of the software doesn't get affected. It also provides the advantage of having certain features available in one version and not in the other version of the software. 

How do the diagrams help you visualize the branch structure?
Diagrams are very helpful as they provide an overall picture of the current software. It displays the various branches associated with the software and which branch should be checked out under various circumstances. It makes it easy to determine the commit that we should checkout for any particular task.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches will output result consisting of properties from both the branches. So the two or more branches that are merged act as the parent for the resultant branch. The resultant branch can be used to check commits of both the parent branches. Therefore, it is represented as the combination of two branches resulting in a final single branch with with both branches acting as the parent and therefore arrow is pointing two towards both branches that have merged.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Gits automatic merging is pretty efficient and makes it easy to merge two files without going through the whole code manually. However, if there is a conflict in any of the files being merged, then git will show the conflicting areas in the code and these confilcting area are then fixed manually for merge to happen. 
 